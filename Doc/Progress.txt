DAY 1.
1) Seadsin projekti malli üles IntelliJs ja GitHubi repo. Leidsin korraliku .gitignore'i.
Esialgu veel lihtne.
2) H2 andmebaas on täiesti uus asi niiet uurin kuidas see töötab projektis
(https://www.baeldung.com/spring-boot-h2-database annab hea kiire ülevaate).
3) Thymeleaf on ka täiesti uus ehk uurin ka seda. Tahan kenama vormi teha.
4) Pärast veidi jamamist lisasin bootstrapi dependencyd.

DAY 2.
1) Alustuseks lõin GitHubis milestone'id ja issue'd, et paremini jälgida mida teha vaja,
mis tehtud jne.
2) Tegin backendi registreerimise funktsionaalsuse, lisasin selle käigus Data Access Layeri,
kuhu tegin repository ja mapperi. Kuna praegu käivas aines (Veebirakendused Java baasil) teeme
oma projektides sarnaseid asju, siis saan sealt spikerdada, mis puutub Springi ja Hibernatei JPAd.
3) Lisasin basic funktsionaalsuse visiitide listi kuvamiseks.

DAY 3.
1) Lisasin DentistEntity ja PersonEntity, vastavalt arstile ja patsiendile. Oleks võimalik neid ka kokku
ühte tabelisse panna, aga lihtsuse eesmärgil ei hakanud seda tegema.
2) Veel lisasin Lomboki projektile, et saaksin getterid/setterid/constructorid eest ära ja nii puhtama koodi.
3) Sain andmebaasi uute olemitega tööle ja lisasin arstide valimiseks select elemendi.

DAY 4.
1) Sain tööle normaalsema visiidikuupäeva valimise registreerimise vormis.
2) Alustasin ka nimekirja vaate kujundamist bootstrapiga.

DAY 5.
1) Sain bootstrapi korda - olin vale versiooni pannud.
2) Lisasin kellaaja valimise vormi. Üritasin saada tööle 24h süsteemi kuidagi, aga andsin alla sellega.
On tunda, et frontend ja just kuidas andmed sinna jõuavad/neid kuvada on osutunud kõige raskemaks/aeganõudvamaks, kuna
Thymeleaf on üpris võõras.

DAY 6.
1) Ajad konverteeruvad veidi halvasti kuna vormist tuleb USA vormingus need. Kuidagi saab kindlalt neid enne andmebaasi
salvestamist convertida. Tegelen hiljem kui aega jätkub, pole väga kriitiline praegu.
2) Nüüd kuvab nimekirja vaade piisavalt andmeid. Töötab see, et ma mapperis panen juba eesnimed perenimed kokku,
lihtsam frontendis nii.
3) Lisasin detailide vaate ja nupud "detailid, muuda, kustuta" nimekirjavaatesse.

DAY 7. (final stretch)
1) Pikalt jamasin CRUD meetoditega, kõikjal objekte kasutades läheb vahest meelest et html töötab siiski puhtalt
teksti - võti/väärtus paaridega. Aga vaadates vanu projekte tuli meelde mida teha tuli.
2) Sain ka otsingu tööle, keeruliseks osutus query parameetrite lisamine thymeleafiga alguses. Otsida saab ainult
täielike vasteid. Natuke Java EE 6 dokumentatsioonis (https://docs.oracle.com/javaee/6/tutorial/doc/bnbuf.html#bnbvg)
ringi kolades leidsin kudas saab ka osalisi vasteid leida. Nüüd saab otsida ka osalisi vasteid ja tähesuurusest sõltumatult.
3) Arvatavasti see on kõik funktsionaalsus, mis ma teen, katsin ära suuremosa tingimusi. Kellaaegade valideerimine tundub
liiga keeruline just andmebaasi ja thymeleafi koha pealt. Teeksin seda muidu nii, et lisaksin igale ajale 30 minutit
või kui iganes kaua ma otsustan, et arstivastuvõtt kestab ja siis lihtsalt uusi aega postitades kontrolliksin kas uus aeg
läheb kuhugi olemasolevate vahemike sisse ja kui läheb siis ei luba esitada.

DAY 8. (conclusion)
1) Veidi parandasin stiili, lisasin kommentaare koodi, et miks midagi just nii tegin.
2) Väga huvitav oli seda rakendust teha, kuna varem olin sarnast asja üles ehitanud C#is Asp.net core'iga.
Javas on üldised mustrid samad aga kohati funktsionaalsuse realisatsioonid erinevad muidugi. Backendi asjadega olin enam-vähem
sina peal või kui ei teadnud siis oskasin otsida, samas frontend, just Thymeleaf oli veidi keeruline. Viimase puhul võttis
kauem, et aru saada, kuidas midagi teha ja kohati muutus takistuseks aegunud vormingute kasutamine (java.util.Date peamiselt).
Nimelt saab vaid seda mallis kasutada nii et selle vormingut oleks võimalik seal muuta. Backendis, kui Date objektile
IDEs . taha panna (kuvatakse automaatselt pakkumisi, et mis funktsiooni rakendada tahad), siis enamus olid depricated.
Kogu selle ja muu keerukuse tõttu otsustasin visiidi aja kontrolli mitte süveneda. See kuidas tõlkeid siin tehakse oli mugav.
Kokkuvõtteks oli huvitav näha/õppida, kuidas Javas ja Spring Bootis asjad käivad :D